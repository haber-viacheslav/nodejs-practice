const path = require("path");
const path32  =require('node:path').win32

console.log(path.basename(__filename)); // Метод path.basename()возвращает последнюю часть a path, подобно basenameкоманде Unix. Конечные разделители каталогов игнорируются. 
//examples -------------------------------------------------------------
// path.basename('/foo/bar/baz/asdf/quux.html');
// Returns: 'quux.html'
// path.basename('/foo/bar/baz/asdf/quux.html', '.html');
// Returns: 'quux'
console.log(path.dirname(__filename)); // Метод path.dirname()возвращает имя каталога path, аналогично dirname команде Unix. Завершающие разделители каталогов игнорируются
console.log(path.extname(__filename)); // Метод path.extname()возвращает расширение path, от последнего вхождения .символа (точка) до конца строки в последней части path. .Если в последней части нет path или если нет других .символов, кроме первого символа базового имени path(см. path.basename()), возвращается пустая строка.
console.log(path.parse(__filename)); //  Метод path.parse() возвращает объект, свойства которого представляют важные элементы path. Завершающие разделители каталогов игнорируются.
console.log(path.join(__dirname, '..', 'contacts.js')); // Метод path.join()объединяет все заданные pathсегменты вместе, используя разделитель для конкретной платформы в качестве разделителя, а затем нормализует полученный путь.
console.log(path.resolve(__dirname, 'test', 'contacts.js')); 
console.log(path32.dirname(__filename)); //Свойство path.win32обеспечивает доступ к специфичным для Windows реализациям методов path. API доступен через require('node:path').win32или require('node:path/win32').

/**
* Метод path.resolve()преобразует последовательность путей или сегментов пути в абсолютный путь.
Данная последовательность путей обрабатывается справа налево, с path добавлением каждого последующего до тех пор, пока не будет построен абсолютный путь. Например, если задана последовательность сегментов пути: /foo, /bar, baz, вызов path.resolve('/foo', '/bar', 'baz')будет возвращен /bar/baz , потому что 'baz'это не абсолютный путь, а таковой '/bar' + '/' + 'baz'является.
Если после обработки всех заданных pathсегментов абсолютный путь еще не сгенерирован, используется текущий рабочий каталог.
Результирующий путь нормализуется, а конечные косые черты удаляются, если только путь не разрешен к корневому каталогу.
Сегменты нулевой длины path игнорируются.
Если pathсегменты не переданы, path.resolve()будет возвращен абсолютный путь к текущему рабочему каталогу. */